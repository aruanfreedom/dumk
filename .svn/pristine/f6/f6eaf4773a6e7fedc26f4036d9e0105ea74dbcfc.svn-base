<?php

class employee_increace_by_current_year_report extends CI_Model
{
    private $objPHPExcel;
    private $sHeadersStart = array(
        'Месяц',
        'Количество',
    );
    private $sFilePath = '';
    private $iRowCount = 0;

    private $sTitle = '';

    function __construct() {
        CI_Model::__construct();
        /** Error reporting */
        error_reporting(E_ALL);
    }

    public function execute() {
        $this->setMeta();
        $this->setData();
        $this->setTitle();
        $this->save();
        $this->addChart();
        $this->view();
    }

    public function addChart() {
        exec('php "' . ROOTPATH . '\33chartcreate-line.php" "' . $this->sFilePath . '" ' . $this->iRowCount, $aOut, $iResult);
        unlink($this->sFilePath);
        $this->sFilePath = str_replace('.xlsx', '_chart.xlsx', $this->sFilePath);
    }

    private function setMeta() {
        /** Include path * */
        ini_set('include_path', ini_get('include_path') . ';../../static/libs/');

        /** PHPExcel */
        include '/static/libs/PHPExcel.php';

        /** PHPExcel_Writer_Excel2007 */
        include '/static/libs/PHPExcel/Writer/Excel2007.php';
        // Create new PHPExcel object
//        echo date('H:i:s') . " Create new PHPExcel object\n";
        $this->objPHPExcel = new PHPExcel();
        // Set properties
        //        echo date('H:i:s') . " Set properties\n";
        $this->objPHPExcel->getProperties()->setCreator("Maarten Balliauw");
        $this->objPHPExcel->getProperties()->setLastModifiedBy("Maarten Balliauw");
        $this->objPHPExcel->getProperties()->setTitle("Office 2007 XLSX Test Document");
        $this->objPHPExcel->getProperties()->setSubject("Office 2007 XLSX Test Document");
        $this->objPHPExcel->getProperties()->setDescription("Test document for Office 2007 XLSX, generated using PHP classes.");
    }

    private function setData() {
        $this->objPHPExcel->setActiveSheetIndex(0);
        $aShortMonths = array("Январь", "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь");
        // Add some data
        //        echo date('H:i:s') . " Add some data\n";
        $aUnicSubd = array();
        $iColPos = 0;

        $this->objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow(5, 1, 'Динамика роста сотрудников по месяцам текущего года');
        if (isset($_GET['branch']) && $_GET['branch'] != 'NaN') {
            $this->objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow(5, 2, $this->sTitle);
        }

        foreach ($this->sHeadersStart as $iK => $sHeader) {
            $this->objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($iColPos++, 1, $sHeader);
        }

        $aBranch = $this->getBranch();

        $iRow = 2;
        $i = 0;
        $iEmployees = 0;
        unset($aBranch['all']['title']);
        foreach ($aBranch['all'] as $sV) {
            $this->objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow(0, $iRow, $aShortMonths[$i++]);
            $this->objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow(1, $iRow, $sV);

            $iRow++;
        }

        $this->iRowCount = $iRow - 1;
    }

    public function getBranch() {
        //Филиалы
        $this->db->select('*');
        $this->db->from('subdivision');

        $this->db->order_by('id');

        if (isset($_GET['branch']) && $_GET['branch'] != 'NaN') {
            $this->db->where('id', (int) $_GET['branch']);
        }
//        $this->db->where('type', 'branch');
        $this->db->where('type != ', 'mosque');
        $this->db->where('type != ', 'area');

        $q = $this->db->get();

        $aData = array(
        );

        $aBranch = array();

        //Филиалы ДУМК
        $aAllBranch = array(
            'title' => 'По всем филиалам'
        );
        for ($i = 1; $i < 13; $i++) {
            $aAllBranch['month_' . $i] = 0;
        }
        $sTitle = '';
        if ($q->num_rows() > 0) {
            foreach ($q->result_array() as $aItem) {
                $aBranch[$aItem['id']] = array(
                    'title' => $aItem['title']
                );
                $this->sTitle = $aItem['title'];
                for ($i = 1; $i < 13; $i++) {
                    $aBranch[$aItem['id']]['month_' . $i] = 0;
                }
                $aIds[] = $aItem['id'];
            }
        }

        //Мечети
        $this->db->select('id, parent_id, path');
        $this->db->from('subdivision');

        $this->db->where('path && \'{' . implode(',', $aIds) . '}\'::bigint[]', null);
        $this->db->where('parent_id is not null', null);
        $this->db->where('type', 'mosque');

        $aMosque = array();

        $q = $this->db->get();
        if ($q->num_rows() > 0) {
            foreach ($q->result_array() as $aItem) {
                $aItem['branch'] = substr($aItem['path'], 1, strpos($aItem['path'], ',') - 1);
                $aBranch[$aItem['branch']] ++; //Количество мечетей
                $aMosque[$aItem['id']] = $aItem;
                $aIds[] = $aItem['id'];
            }
        }

        //Пользователи
        $this->db->select('u.*, p.title as post_title');
        $this->db->from('users u, ref_posts p');

        $this->db->where('u.post = p.id');
        $this->db->where("to_date(job_start, 'DD/MM/YYYY') > '" . date('Y') . "-01-01'");
        $this->db->where('u.place_of_work = ANY(\'{' . implode(',', $aIds) . '}\'::int[])', null);

        $q = $this->db->get();
        $aPosts = array();
        if ($q->num_rows() > 0) {
            $a = $q->result_array();
            foreach ($a as $key => $aV) {
                $iBranchId = 0;
                $iMonth = DateTime::createFromFormat('d/m/Y', $aV['job_start'])->format('n');

                if ($iMonth > 0 && (array_key_exists($aV['place_of_work'], $aMosque) || array_key_exists($aV['place_of_work'], $aBranch))) {
                    if (array_key_exists($aV['place_of_work'], $aMosque)) {
                        $iBranchId = $aMosque[$aV['place_of_work']]['branch'];
                    } else if (array_key_exists($aV['place_of_work'], $aBranch)) {
                        $iBranchId = $aV['place_of_work'];
                    }

                    $aBranch[$iBranchId]['month_' . $iMonth] ++; //Всего количество сотрудников
                    $aAllBranch['month_' . $iMonth] ++;
                }
            }
        }

        return array_merge(array('all' => $aAllBranch), $aBranch);
    }

    private function setTitle() {
        // Rename sheet
        //        echo date('H:i:s') . " Rename sheet\n";
        $this->objPHPExcel->getActiveSheet()->setTitle('Simple');
    }

    public function save() {
        // Save Excel 2007 file
        //        echo date('H:i:s') . " Write to Excel2007 format\n";
        $objWriter = new PHPExcel_Writer_Excel2007($this->objPHPExcel);
        $this->sFilePath = str_replace('.php', '_' . time() . '.xlsx', __FILE__);
        $objWriter->save($this->sFilePath);
    }

    private function view() {
        $sMime = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';
        $iFileSize = filesize($this->sFilePath);

        header('Content-type: ' . $sMime);
        header('Content-Disposition: attachment; filename="Динамика роста сотрудников по месяцам текущего года.xlsx"');
        header('Content-Length: ' . $iFileSize);
        readfile($this->sFilePath);

        unlink($this->sFilePath);
        // Echo done
        //        echo date('H:i:s') . " Done writing file.\r\n";
    }

}
